# -*- coding: utf-8 -*-
"""SAMR-DNLP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10tebUo2wA5Mj3NEKSCZ-iQjMQiGZ31Q-

#**Sentiment Analysis based on Movie Review**
"""

import numpy as np
import pandas as pd 
from sklearn.neural_network import MLPClassifier
import matplotlib.pyplot as plt
import zipfile

zip = zipfile.ZipFile('train.tsv.zip')
zip.extractall()

zip = zipfile.ZipFile('test.tsv.zip')
zip.extractall()

df_train=pd.read_csv('train.tsv',sep='\t')
df_train=df_train.dropna(how='any')
df_train=df_train.drop(columns=['PhraseId','SentenceId'])
df_train

df_train['Sentiment'].unique()

import re
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
corpus = []
corpus1=[]
corpus2=[]
for i in range(0, 156060):
  review = re.sub('[^a-zA-Z]', ' ', df_train['Phrase'][i])
  review = review.lower()
  review = review.split()
  ps = PorterStemmer()
  all_stopwords = stopwords.words('english')
  all_stopwords.remove('not')
  review = [ps.stem(word) for word in review if not word in set(all_stopwords)]
  review = ' '.join(review)
  corpus.append(review)

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features = 1500)
X = cv.fit_transform(corpus).toarray()
y=df_train.iloc[:,-1].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state = 0)

model=MLPClassifier(alpha=0.01, batch_size=256, epsilon=1e-08, learning_rate='adaptive', max_iter=100)
model.fit(X_train,y_train)

res = model.predict(X_test)
res=np.round(res)
np.set_printoptions(precision=2)
print(res)

from sklearn.metrics import accuracy_score
print("Accuracy Score for the algorithm=>{}%".format(round(accuracy_score(y_test,res)*100),2))

"""#**Testing the Model**"""

df_test=pd.read_csv('test.tsv',sep='\t')
df_test=df_test.dropna(how='any')
df_test=df_test.drop(columns=['PhraseId','SentenceId'])
df_test

import re
import nltk
nltk.download('stopwords')
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
corpus = []
corpus1=[]
corpus2=[]
for i in range(0, 66292):
  review = re.sub('[^a-zA-Z]', ' ', df_train['Phrase'][i])
  review = review.lower()
  review = review.split()
  ps = PorterStemmer()
  all_stopwords = stopwords.words('english')
  all_stopwords.remove('not')
  review = [ps.stem(word) for word in review if not word in set(all_stopwords)]
  review = ' '.join(review)
  corpus.append(review)

from sklearn.feature_extraction.text import CountVectorizer
cv = CountVectorizer(max_features = 1500)
X = cv.fit_transform(corpus).toarray()

res = model.predict(X_test)
res=np.round(res)
np.set_printoptions(precision=2)
print(res)

for i in range(len(df_test)):
  for j in range(len(res)):
    if i==j:
      print("The catgory for this phrase{0} is{1}" .format(df_test['Phrase'][i],res[i]))